@model SoCot_HC_FE.Handler.PaginationHandler<SoCot_HC_FE.Models.Service>
@if (Model?.Items != null && Model.Items.Any())
{
    var pageCount = (Model.CurrentPage);
    foreach (var d in Model.Items)
    {
        <tr>
            <th>@pageCount</th>
            <td>@d.Facility.FacilityName</td>
            <td>@d.ServiceClassification.Name</td>
            <td>@d.ServiceName</td>
            <td>@d.Description</td>
            <td>
                <div class="btn-group  rm-padding">
                    <a href="#" class="btn btn-transparent dropdown-toggle no-border  rm-padding" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="mdi mdi-dots-horizontal text-primary fs-3"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-sm p-1">
                        <a class="dropdown-item btn-rounded " href="#" onclick="ShowServiceForm('@d.ServiceId')">Edit</a>@*Add single quote if id is guid*@
                    </div>
                </div>
            </td>
        </tr>
        pageCount += 1;
    }
}
else
{
    <tr>
        <td colspan="6" class="text-center">No data found</td>
    </tr>
}

<tr class="pagingTableRow">
    <td colspan="6" class="pagingTableRow">
        @if (Model != null && Model.TotalRecords > 0)
        {
            <div class="d-flex justify-content-between align-items-center mt-3">
                <!-- Pagination Summary on the Left -->
                <div>
                    Showing  @(((Model.CurrentPage - 1) * Model.PageSize) + 1)
                    to @(Math.Min((Model.CurrentPage) * Model.PageSize, Model.TotalRecords))
                    of @Model.TotalRecords entries
                </div>

                <div>
                    <ul class="pagination mb-0">
                        <!-- Previous Button -->
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="javascript:void(0);" onclick="LoadTable(@(Model.CurrentPage), @Model.PageSize)">
                                Previous
                            </a>
                        </li>

                        @{
                            int visiblePages = 5; // Number of visible pages at a time
                            int currentPage = Model.CurrentPage;
                            int totalPages = Model.TotalPages;

                            // Calculate the start and end range of page numbers
                            int startPage = ((currentPage - 1) / visiblePages) * visiblePages + 1;
                            int endPage = Math.Min(startPage + visiblePages - 1, totalPages);
                        }

                        <!-- Page Numbers -->
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="javascript:void(0);" onclick="LoadTable(@i, @Model.PageSize)">
                                    @i
                                </a>
                            </li>
                        }

                        <!-- Ellipsis for Next Range -->
                        @if (endPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="javascript:void(0);" onclick="LoadTable(@(endPage + 1), @Model.PageSize)">
                                    ...
                                </a>
                            </li>
                        }

                        <!-- Next Button -->
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="javascript:void(0);" onclick="LoadTable(@(Model.CurrentPage + 1), @Model.PageSize)">
                                Next
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        }
    </td>
</tr>
